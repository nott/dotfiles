;;; .emacs --- Initialization file for Emacs

;;; Commentary:

;; Emacs Startup File --- initialization for Emacs

;;; Code:

;; Early start configuration
;; -------------------------

;; Ignoring warning "Unnecessary call to ‘package-initialize’ in init file"
;; until https://github.com/cask/cask/issues/463 is resolved
;; TODO: revert
(setq warning-minimum-level :emergency)

(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
(setq
 inhibit-startup-screen t
 inhibit-splash-screen t)

(require 'cask)
(cask-initialize)
(load-theme 'nord t)
(require 'use-package)

;; Configuration of builtin emacs features
;; ---------------------------------------

(setq
 indent-tabs-mode nil
 tab-width 4
 column-number-mode t
 select-enable-clipboard t)

;; enable C-x C-u and C-x C-l
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; save backup versions of modified buffers in a single directory
;; (the default configuration puts them next to the edited files)
(make-directory "~/.emacs.d/saves/" t)
(setq
   backup-by-copying t
   backup-directory-alist
    '(("." . "~/.emacs.d/saves/"))
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)

;; Pretty buffer names for duplicate filenames
(use-package ido
  :config
  (ido-mode 1))

;; Display duplicate buffer names properly
(use-package uniquify
  :config
  (setq
   uniquify-buffer-name-style 'post-forward
   uniquify-separator ":"))

;; Enable line numbers
(use-package linum
  :config (global-linum-mode))

(use-package python
  :init
  ;; we need setq-default instead of setq because this is a buffer local variable
  ;; TODO: make it work (it used to!)
  (setq-default py-split-windows-on-execute-function 'split-window-horizontally))

;; Org mode settings
(use-package org
  :init
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq
    org-log-done t
    org-agenda-files '("~/org"))
  ;; eval plantuml diagrams without asking for confirmations
  (defun stas/org-confirm-babel-evaluate (lang body)
    (not (string= lang "plantuml")))
  (setq org-confirm-babel-evaluate 'stas/org-confirm-babel-evaluate))

;; Configuration of external packages
;; ----------------------------------

(use-package gkroam
  :ensure t
  :init
  (make-directory "~/brain/" t)
  (setq gkroam-root-dir "~/brain/")
  (setq gkroam-prettify-p t
        gkroam-show-brackets-p t
        gkroam-use-default-filename t
        gkroam-window-margin 4)
  :bind
  (("C-c r I" . gkroam-index)
   ("C-c r d" . gkroam-daily)
   ("C-c r f" . gkroam-find)
   ("C-c r i" . gkroam-insert)
   ("C-c r c" . gkroam-capture)
   ("C-c r e" . gkroam-link-edit)
   ("C-c r n" . gkroam-smart-new)
   ("C-c r p" . gkroam-toggle-prettify)
   ("C-c r t" . gkroam-toggle-brackets)
   ("C-c r D" . gkroam-toggle-dynamic)
   ("C-c r g" . gkroam-update)))

(use-package magit
  :bind (("C-x g" . magit-status)))

(use-package editorconfig
  :config (editorconfig-mode 1))

(use-package projectile
  :init
  (setq projectile-keymap-prefix (kbd "C-c p"))
  :hook (after-init . projectile-global-mode))

(use-package yasnippet
  :config
  (yas-global-mode 1)
  (yas-load-directory "~/.emacs.d/snippets"))

(use-package company
  :hook (after-init . global-company-mode))

(use-package flycheck
  :hook (after-init . global-flycheck-mode))

(use-package ace-window
  :bind ("M-p" . ace-window))

(use-package rg
  :hook (after-init . rg-enable-default-bindings))

(use-package web-mode
  :mode ("\\.html$" . web-mode))

(use-package plantuml-mode
  :init
  (setq plantuml-default-exec-mode 'jar)
  (setq plantuml-jar-path "/usr/share/java/plantuml/plantuml.jar")
  (setq org-plantuml-jar-path plantuml-jar-path)
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages '((plantuml . t))))

(use-package lsp-mode
  :hook ((python-mode . lsp)
	 (rust-mode . lsp))
  :commands lsp)

(use-package lsp-ui
  :commands lsp-ui-mode
  :config
  (setq
   lsp-ui-sideline-enable nil
   lsp-rust-server 'rust-analyzer))

(use-package rust-mode
  :mode ("\\.rs\\$" . rust-mode))

(use-package cargo-mode
  :hook (rust-mode . cargo-minor-mode))

(provide '.emacs)
;;; .emacs ends here
